import numpy as np

def getIndexRuleta(ruleta, pGiro, index = 0):
    print(pGiro)
    if ruleta[index] > pGiro:
        return index
    else:
        return getIndexRuleta(ruleta, pGiro, index + 1)


def getWayH2(wayH, destinos):
    wayPosseH  = list( destinos.difference( set( wayH))) # se obtiene los seguiente posibles nodos que puede visitar
    if not wayPosseH : #forma de preguntar si es una lista vacia
        return wayH
    else:
        #funcion de calculo de probabilida del camino de la hormiga, el nodo en que se encuetra es el primero de la lista
        sumatoria = np.power(sigma[wayH[0], wayPosseH ] , alpha) @ np.power( (1 / M[wayH[0], wayPosseH]), beta)
        probabilidades =np.array( [np.power(sigma[wayH[0], i], alpha) * np.power(1 / M[wayH[0], i], beta) for i in wayPosseH ] / sumatoria )
        
        #armo la ruleta donde se acumula las probabilidades, 
        ruleta = [ np.sum(probabilidades[0:i]) for i in range(1, probabilidades.shape[0])]
        ruleta.append(1.0)
        
        #obtengo la posicion en la lista del elemento y esto lo agrego al principio de la lista 
        index = getIndexRuleta(ruleta, np.random.random()) #obtengo un indice de los elementos, aleatoriamente
        wayH.insert(0, wayPosseH[index])
        return getWayH2(wayH, destinos)


#M : matriz de los caminos, cada elemento ij indica la distancia entre el elemento i y j
#N : cantidad de hormigas
def coloniaHormigas(M, N, valorDesado = 10, maxIter = 100,  alpha = 0.01, beta = 0.001, rho = 0.01):
    sigma = np.ones_like(M) #incio de las feromonas
    destinos = set(range(M.shape[0])) # conjunto de todos los caminos posibles
    origen = 0
    wayMinH = list()
    valorMin = valorDesado + 1
    it = 0

    def getWayH(wayH):
        wayPosseH  = list( destinos.difference( set( wayH))) # se obtiene los seguiente posibles nodos que puede visitar
        if not wayPosseH : #forma de preguntar si es una lista vacia
            return wayH
        else:
            #funcion de calculo de probabilida del camino de la hormiga, el nodo en que se encuetra , es el ultimo de la lista
            sumatoria = np.power(sigma[wayH[-1], wayPosseH ] , alpha) @ np.power( (1 / M[wayH[-1], wayPosseH]), beta)
            probabilidades =np.array( [np.power(sigma[wayH[-1], i], alpha) * np.power(1 / M[wayH[-1], i], beta) for i in wayPosseH ] / sumatoria )
            
            #armo la ruleta donde se acumula las probabilidades, 
            ruleta = [ np.sum(probabilidades[0:i]) for i in range(1, probabilidades.shape[0])]
            ruleta.append(1.0)
            
            #obtengo la posicion en la lista del elemento y esto lo agrego al principio de la lista 
            index = getIndexRuleta(ruleta, np.random.random()) #obtengo un indice de los elementos, aleatoriamente
            wayH.append(wayPosseH[index])
            return getWayH(wayH)


    while maxIter > it and valorDesado < valorMin:
        it+=1
        wayHs = [ getWayH([origen]) for i in range(N)]
        print(wayHs)




